<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理， 注意：使用mapper代理方法开发，namespace有特殊重要的作用， 
	namespace等于mapper（Mapper）接口全路径名 -->
<mapper namespace="com.fly.mapper.OrdersMapper">
	<!--01查询订单关联查询用户 resultType -->
	<select id="findOrdersUser" resultType="com.fly.domain.OrdersCustom">
		select
		orders.*,
		user.username,
		user.sex,
		user.address
		from
		orders,
		user
		where orders.user_id
		= user.id
	</select>

	<!--02查询订单关联查询用户 resultMap 引用下面定义的resultMap的id -->
	<select id="findOrdersUserResultMap" resultMap="OrdersUserResultMap">
		select
		orders.*,
		user.username,
		user.sex,
		user.address
		from
		orders,
		user
		where orders.user_id
		= user.id
	</select>
	<!--02 订单查询关联用户的resultMap 将整个查询的结果映射到com.fly.domain.Orders中 -->
	<resultMap type="com.fly.domain.Orders" id="OrdersUserResultMap">
		<!-- 配置映射的订单信息 -->
		<!-- id：指定查询列中的唯 一标识，订单信息的中的唯 一标识，如果有多个列组成唯一标识，配置多个id column：订单信息的唯 一标识 
			列 property：订单信息的唯 一标识 列 所映射到Orders中哪个属性 -->
		<id column="id" property="id" />
		<result column="user_id" property="userId" />
		<result column="number" property="number" />
		<result column="createtime" property="createtime" />
		<result column="note" property="note" />
		<!-- 配置映射的关联的用户信息 -->
		<!-- association：用于映射关联查询单个对象的信息 一对一的时候用 property：要将关联查询的用户信息映射到Orders中哪个属性 -->
		<association property="user" javaType="com.fly.domain.User">
			<!-- id：关联查询用户的唯 一标识 column：指定唯 一标识用户信息的列，写的是查询结果的关联字段名 property：映射到user的哪个属性 -->
			<id column="user_id" property="id" />
			<result column="username" property="username" />
			<result column="sex" property="sex" />
			<result column="address" property="address" />
		</association>
	</resultMap>


	<!--03查询订单关联查询用户及订单明细 resultMap 引用下面定义的resultMap的id -->
	<select id="findOrdersAndOrderDetailResultMap" resultMap="OrdersAndOrderDetailResultMap">
		SELECT
		orders.*,
		USER.username,
		USER.sex,
		USER.address,
		orderdetail.id
		orderdetail_id,
		orderdetail.items_id,
		orderdetail.items_num,
		orderdetail.orders_id
		FROM
		orders,
		USER,
		orderdetail
		WHERE orders.user_id =
		user.id AND orderdetail.orders_id=orders.id;
	</select>
	<!-- 03订单及订单明细的resultMap 使用extends继承，不用在中配置订单信息和用户信息的映射 -->
	<resultMap type="com.fly.domain.Orders" id="OrdersAndOrderDetailResultMap"
		extends="OrdersUserResultMap">
		<!-- 1订单信息 -->
		<!-- 2用户信息 -->
		<!-- 使用extends继承，不用在中配置订单信息和用户信息的映射(相当于复制上面的 订单信息 和用户信息) -->

		<!-- 3订单明细信息 一对多 要用collection映射到集合，一对一用association映射到单个对象 一个订单关联查询出了多条明细，要使用collection进行映射 
			collection：对关联查询到多条记录映射到集合对象中 property：将关联查询到多条记录映射到domian类Orders哪个属性=list集合属性orderdetails 
			ofType：指定映射到list集合属性中domian的类型 -->
		<collection property="orderdetails" ofType="com.fly.domain.Orderdetail">
			<!-- id：订单明细唯 一标识 property:要将订单明细的唯 一标识 映射到domian类Orderdetail的哪个属性 -->
			<id column="orderdetail_id" property="id" /><!--这里查询sql语句column用了别名(因为有id重复)，就要把别名写在这里 -->
			<result column="items_id" property="itemsId" />
			<result column="items_num" property="itemsNum" />
			<result column="orders_id" property="ordersId" />
		</collection>
	</resultMap>

	<!--04查询用户及购买的信息4表 resultMap -->
	<select id="findAll" resultMap="findAllResultMap">
		SELECT
		orders.*,
		USER.username,
		USER.sex,
		USER.address,
		orderdetail.id orderdetail_id,
		orderdetail.items_id,
		orderdetail.items_num,
		orderdetail.orders_id,
		items.name items_name,
		items.detail items_detail,
		items.price
		items_price
		FROM
		orders,
		USER,
		orderdetail,
		items
		WHERE orders.user_id =
		user.id AND orderdetail.orders_id=orders.id AND
		orderdetail.items_id =
		items.id
	</select>
	<!--04查询用户及购买的信息 多对多4表 resultMap -->
	<resultMap type="com.fly.domain.User" id="findAllResultMap">
		<!-- 用户信息 -->
		<id column="user_id" property="id" />
		<result column="username" property="username" />
		<result column="sex" property="sex" />
		<result column="address" property="address" />
		<collection property="orders" ofType="com.fly.domain.Orders">
			<!--订单信息 集合用collection -->
			<id column="id" property="id" />
			<result column="user_id" property="userId" />
			<result column="number" property="number" />
			<result column="createtime" property="createtime" />
			<result column="note" property="note" />

			<!--订单明细 集合用collection -->
			<collection property="orderdetails" ofType="com.fly.domain.Orderdetail">
				<id column="orderdetail_id" property="id" /><!--这里查询sql语句column用了别名(因为有id重复)，就要把别名写在这里 -->
				<result column="items_id" property="itemsId" />
				<result column="items_num" property="itemsNum" />
				<result column="orders_id" property="ordersId" />
				<collection property="items" ofType="com.fly.domain.Items">
					<!--商品明细 -->
					<id column="items_id" property="id" />
					<result column="items_name" property="name" />
					<result column="items_detail" property="detail" />
					<result column="items_price" property="price" />
				</collection>
			</collection>
		</collection>
	</resultMap>

	<!--05association延迟加载 查询订单并且关联查询用户信息 -->
	<select id="findOrdersUserLazyLoading" resultMap="OrdersUserLazyLoadingMap">
		select * from orders
	</select>
	<!--05association延迟加载 resultMap -->
	<resultMap type="com.fly.domain.Orders" id="OrdersUserLazyLoadingMap">
		<id column="id" property="id" />
		<result column="user_id" property="userId"/>
		<result column="number" property="number"/>
		<result column="createtime" property="createtime"/>
		<result column="note" property="note"/>
		<!-- 实现延迟加载 -->
		<association property="user" javaType="com.fly.domain.User" select="findUser" column="user_id">
		<!-- 用户信息(延时加载)
		    select：相当于是子查询。：05根据id查询一个user
			column：订单信息中关联用户信息查询的列，是user_id -->
		</association>
	</resultMap>
	     <!--05根据id查询一个user。相当于是子查询。  -->
     <select id="findUser" parameterType="int" resultType="com.fly.domain.User">
         select * from user where id = #{id}
     </select>
</mapper>


